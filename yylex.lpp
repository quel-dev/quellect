%{
#ifndef NODE_H_
#define NODE_H_
#include "node.h"
#endif

#ifndef YYLEX_HPP_
#define YYLEX_HPP_
#include "yyparse.tab.hpp"
#endif

#include "assert.h"

#include <string>

template<short Tok>
inline short MakeToken();

#define Return(TOK)					\
  return MakeToken<TOK>()

%}

%option header-file = "yylex.hpp"

%%

"=="        { Return(EQ);}
"!="        { Return(NE);}
"<"         { Return(LT);}
">"         { Return(GT);}
"<="        { Return(LE);}
">="        { Return(GE);}
"||"        { Return(LOGOR);}
"&&"        { Return(LOGAND);}
"alias"     { Return(ALIAS);}
"type"      { Return(TYPE);}
"int"       { Return(INT);}
"double"    { Return(DOUBLE);}
"string"    { Return(STRING);}
"function"  { Return(FUNC);}
"::<"       { Return(FUNC_BRAC);}
"if"        { Return(IF);}
"else"      { Return(ELSE);}
"switch"    { Return(SWITCH);}
"->"        { Return(EVENT);}
"<-"        { Return(BEHAV);}
"return"    { Return(RETURN);}
"print"     { Return(PRINT);}
"println"   { Return(PRINTLN);}
"for"       { Return(FOR); }
"while"     { Return(WHILE); }
[A-Za-z_]+[0-9]*  { Return(IDEN);}
[\-]?[0-9]+      { Return(INT_NUM);}
[\-]?[0-9]*\.[0-9]+ { Return(DOUBLE_NUM);}
\"[^"]*.    { 
              if (yytext[yyleng-2] == '\\') {
                yyless(yyleng-1);
                yymore();
              } else {
                Return(CONST_STR);
              }
            }
"//".*\n    ;
[ \t\n]     ;
.           {return yytext[0];}
%%
int yywrap(){
  return 1;
}

extern YYSTYPE yylval;

// base == 10
double str_to_d(char* s) {
  bool neg = (s[0] == '-');
  const double base = 10;
  double int_value = 0;
  int i;
  if (neg) {
    i = 1;
  } else {
    i = 0;
  }
  while(s[i] && s[i] != '.') {
    assert(s[i] >= '0');
    assert(s[i] <= '9');
    int_value *= base;
    int_value += s[i] - '0';
    ++i;
  }
  if (s[i] == '.') {
    ++i;
  } else {
    return int_value;
  }
  double frac_value = 0; 
  double base_mult = base;
  while(s[i]) {
    assert(s[i] >= '0');
    assert(s[i] <= '9');
    frac_value += (s[i] - '0') / base_mult; 
    base_mult *= base;
    ++i;
  }
  if (neg) {
    return -(int_value + frac_value);
  } else {
    return int_value + frac_value;
  }
}

int str_to_32(char* s) {
  bool neg = (s[0] == '-');
  const int base = 10;
  int value = 0;
  for (int i = neg ? 1 : 0 ; s[i] ; ++i) {
    assert(s[i] >= '0');
    assert(s[i] <= '9');
    value *= base;
    value += (s[i] - '0');
  }
  if (-neg) {
    return -value;
  } else {
    return value;
  }
}

std::string str_to_const_str(const char* s) {
  assert(s[0] == '\"');
  std::string const_str = "";
  int len = strlen(s);
  for (int i = 1 ; i + 1 < len ; ++i) {  // ignore the first and the last "
    if (s[i] != '\\') {
      const_str += s[i];
    } else {
      const_str += s[i+1];
      ++i;
    }
  }
  return const_str;
}

template<short Tok>
inline short MakeToken() {
  switch(Tok) {
    case INT_NUM:
      yylval.int_token = new IntToken(Tok, str_to_32(yytext));
    break;
    case DOUBLE_NUM:
      yylval.double_token = new DoubleToken(Tok, str_to_d(yytext));
    break;
    case CONST_STR:
      yylval.token = new StringToken(Tok, str_to_const_str(yytext), true);
    break;
    default:
      yylval.token = new StringToken(Tok, yytext, false);
  }
  return Tok;
}
